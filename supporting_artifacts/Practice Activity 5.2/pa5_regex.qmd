---
title: "PA 5.1: Regular Expressions"
format: 
  html: 
    self-contained: true
    code-tools: true
editor: visual
execute: 
  echo: true
  warning: false
  message: false
---

## Setup

The scrambled message data are located in the data folder. Modify the code below to load the scrambled message dataset :

```{r package}
library(tidyverse)

```

```{r data}
message <- read_csv(here::here("data" , "scrambled_message.txt")
                      )
```

## Warm-up exercises

1.  How many characters are in the scrambled message?

[**Vector Approach:**]{.underline}

```{r num-chr-vector}
# str_length(Word) %>% 
 # sum()
```

[**Dataframe Approach:**]{.underline}

```{r num-chr-dataframe}
message %>% 
  mutate(length = str_length(message$Word)) %>% 
  summarise(total_length = sum(length))
```

2.  How many words are in the scrambled message?

[**Vector Approach:**]{.underline}

```{r num-words-vector}
# str_subset(Word, pattern = "\\b") %>% 
#  length()
```

[**Dataframe Approach:**]{.underline}

```{r num-words-dataframe}
message %>% 
  filter(str_detect(message$Word, pattern = "\\w")) %>% 
  count() 
```

3.  Print out every piece of a word in the scrambled message that starts with the letter "m".

    ```{r}
    letter_m <- message %>% 
      filter(str_detect(Word, pattern = "^m"))
    print(letter_m)

      
      
    ```

4.  Print out every piece of a word in the scrambled message that ends with the letter "z"

    ```{r}
    letter_z <- message %>% 
      filter(str_detect(Word, pattern = "z$"))
    print(letter_z)
    ```

5.  Print out every punctuation symbol in the scrambled message.

    ```{r}
    punct <- message %>%
      mutate(symbols = str_extract_all(Word, pattern = "[[:punct:]]")) %>%
      unnest(symbols) %>%
      filter(nchar(symbols) > 0)
    print(punct)

    ```

::: callout-tip
# Every punctuation symbol!

Careful! There could be multiple punctuation symbols in a word, so `str_extract_all()` seems like the better tool. However, the output of this funtion is a *list*. A helpful function for flattening a list to a regular column is `unnest()`!
:::

6.  Print out the longest word in the scrambled message.

    ```{r}
    longest_word <- message %>% 
      mutate(word_length = str_length(Word)) %>% 
      top_n(1, word_length) %>% 
      select(Word)
    print(longest_word)
    ```

## Decode a message

Complete the following steps to decode the message.

1.  Remove any spaces before or after each word.

    ```{r}
    message <- message |>
      mutate(Word = str_trim(Word))

    ```

2.  No word should be longer than 16 characters. Drop all extra characters off the end of each word.

    ```{r}
    message <- message |>
       mutate(Word = substr(Word, 1, 16))

    ```

3.  Any time you see the word "ugh", with any number of h's, followed by a punctuation mark, delete this.

    ```{r}
    message <- message |>
      mutate(Word = str_remove(Word, "ugh+[\\W]"))
    ```

4.  Replace all instances of exactly 2 a's with exactly 2 e's.

    ```{r}
    message <- message %>%
      mutate(Word = str_replace_all(Word, "aa", "ee"))

    ```

5.  Replace all z's with t's.

    ```{r}
    message <- message %>%
      mutate(Word = str_replace_all(Word, "z", "t"))

    ```

6.  Every word that ends in b, change that to a y.

    ```{r}
    message <- message %>%
      mutate(Word = str_replace_all(Word, "b\\b", "y"))

    ```

7.  Every word that starts with k, change that to a v.

    ```{r}
    message <- message %>% 
      mutate(Word = ifelse(str_detect(Word, "^k"), 
                           str_replace(Word, "^k", "v"), 
                           Word))
    ```

8.  Use `str_c()` to recombine all your words into a message.

    ```{r}
    message_final <- message %>% 
      mutate(Message = str_c(Word, collapse = " ")) %>% 
      pull(Message)
    print(message_final)

    ```

9.  Find the movie this quote is from.
